{"version":3,"sources":["logo.svg","components/Scrollable/ScrollComponent.jsx","components/Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScrollComponent","props","state","photos","loading","page","prevY","this","getPhotos","observer","IntersectionObserver","handleObserver","bind","root","rootMargin","threshold","observe","loadingRef","entities","y","boundingClientRect","curPage","length","albumId","setState","axios","get","then","res","data","loadingTextCSS","display","className","style","minHeight","map","user","index","key","src","url","height","width","ref","margin","Component","Dashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,yKCuF5BC,E,kDAnFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,GACRC,SAAS,EACTC,KAAM,EACNC,MAAO,GANI,E,gEAWfC,KAAKC,UAAUD,KAAKL,MAAMG,MAQ1BE,KAAKE,SAAW,IAAIC,qBAChBH,KAAKI,eAAeC,KAAKL,MAPf,CACVM,KAAM,KACNC,WAAY,MACZC,UAAW,IAOfR,KAAKE,SAASO,QAAQT,KAAKU,c,qCAGhBC,EAAUT,GACrB,IAAMU,EAAID,EAAS,GAAGE,mBAAmBD,EACzC,GAAIZ,KAAKL,MAAMI,MAAQa,EAAG,CACtB,IACME,EADYd,KAAKL,MAAMC,OAAOI,KAAKL,MAAMC,OAAOmB,OAAS,GACrCC,QAC1BhB,KAAKC,UAAUa,GACfd,KAAKiB,SAAS,CAAEnB,KAAMgB,IAE1Bd,KAAKiB,SAAS,CAAElB,MAAOa,M,gCAGjBd,GAAO,IAAD,OACZE,KAAKiB,SAAS,CAAEpB,SAAS,IACzBqB,IACKC,IADL,4DAE6DrB,EAF7D,eAIKsB,MAAK,SAAAC,GACF,EAAKJ,SAAS,CAAErB,OAAO,GAAD,mBAAM,EAAKD,MAAMC,QAAjB,YAA4ByB,EAAIC,SACtD,EAAKL,SAAS,CAAEpB,SAAS,S,+BAI3B,IAAD,OASC0B,EAAiB,CAAEC,QAASxB,KAAKL,MAAME,QAAU,QAAU,QAEjE,OACI,yBAAK4B,UAAU,aACX,yBAAKC,MAAO,CAAEC,UAAW,UACpB3B,KAAKL,MAAMC,OAAOgC,KAAI,SAACC,EAAMC,GAAP,OACnB,yBAAKC,IAAKD,EAAOE,IAAKH,EAAKI,IAAKC,OAAO,QAAQC,MAAM,cAG7D,yBACIC,IAAK,SAAA1B,GAAU,OAAK,EAAKA,WAAaA,GACtCgB,MAjBO,CACfQ,OAAQ,QACRG,OAAQ,SAiBA,0BAAMX,MAAOH,GAAb,oB,GAxEUe,aCUfC,E,uKARP,OACI,6BACI,kBAAC,EAAD,W,GAJQD,aCiBTE,MAff,WACE,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAEF,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,IACX,kBAAC,EAAD,UCDMgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.690ea83e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass ScrollComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            photos: [],\n            loading: false,\n            page: 0,\n            prevY: 0\n        }\n    }\n\n    componentDidMount() {\n        this.getPhotos(this.state.page);\n\n        var options = {\n            root: null,\n            rootMargin: \"0px\",\n            threshold: 1.0\n        };\n\n        this.observer = new IntersectionObserver(\n            this.handleObserver.bind(this),\n            options\n        );\n        this.observer.observe(this.loadingRef);\n    }\n\n    handleObserver(entities, observer) {\n        const y = entities[0].boundingClientRect.y;\n        if (this.state.prevY > y) {\n            const lastPhoto = this.state.photos[this.state.photos.length - 1];\n            const curPage = lastPhoto.albumId;\n            this.getPhotos(curPage);\n            this.setState({ page: curPage });\n        }\n        this.setState({ prevY: y });\n    }\n\n    getPhotos(page) {\n        this.setState({ loading: true });\n        axios\n            .get(\n                `https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=10`,\n            )\n            .then(res => {\n                this.setState({ photos: [...this.state.photos, ...res.data]});\n                this.setState({ loading: false });\n            })\n    }\n\n    render() {\n\n        // Additional css\n        const loadingCSS = {\n            height: \"100px\",\n            margin: \"30px\"\n        };\n\n        // To change the loading icon behavior\n        const loadingTextCSS = { display: this.state.loading ? \"block\" : \"none\" };\n\n        return (\n            <div className=\"container\">\n                <div style={{ minHeight: \"800px\" }}>\n                    {this.state.photos.map((user, index) => (\n                        <img key={index} src={user.url} height=\"100px\" width=\"200px\" />\n                    ))}\n                </div>\n                <div\n                    ref={loadingRef => (this.loadingRef = loadingRef)}\n                    style={loadingCSS}\n                >\n                    <span style={loadingTextCSS}>Loading...</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst loadingCSS = {\n    height: \"100px\",\n    margin: \"30px\"\n};\n\nexport default ScrollComponent;","import React, {Component} from 'react';\nimport ScrollComponent from \"../Scrollable/ScrollComponent\";\n\nclass Dashboard extends Component {\n    render() {\n        return (\n            <div>\n                <ScrollComponent></ScrollComponent>\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome</p>\n      </header>\n      <div className=\"body-content\">\n          <div className=\"\">\n              <Dashboard></Dashboard>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}